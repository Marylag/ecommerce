openapi: 3.0.0
info:
  title: E-commerce API
  description: API documentation for the E-commerce platform
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: 
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Username or email already exists
        '500':
          description: Internal server error

  /auth/login:
    post:
      summary: Log in a user
      tags: 
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Invalid username or password
        '500':
          description: Internal server error

  /users/{userId}:
    get:
      summary: Retrieve user details by ID
      tags: 
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to retrieve
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update user details by ID
      tags: 
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: The ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
        '500':
          description: Internal server error

  /products:
    get:
      summary: Retrieve all products
      tags: 
        - Products
      parameters:
        - in: query
          name: category
          schema:
            type: integer
          description: Filter products by category ID
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error

    post:
      summary: Create a new product
      tags: 
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
        '500':
          description: Internal server error

  /products/{productId}:
    get:
      summary: Retrieve a specific product by ID
      tags: 
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to retrieve
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error

    put:
      summary: Update a product by ID
      tags: 
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a product by ID
      tags: 
        - Products
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: The ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '500':
          description: Internal server error

  /cart:
    post:
      summary: Create a new cart
      tags: 
        - Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartCreate'
      responses:
        '201':
          description: Cart created successfully
        '500':
          description: Internal server error

  /cart/{cartId}:
    get:
      summary: Retrieve a cart by ID
      tags: 
        - Cart
      parameters:
        - in: path
          name: cartId
          schema:
            type: integer
          required: true
          description: The ID of the cart to retrieve
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Cart not found
        '500':
          description: Internal server error

  /cart/{cartId}/items:
    post:
      summary: Add an item to the cart
      tags: 
        - Cart
      parameters:
        - in: path
          name: cartId
          schema:
            type: integer
          required: true
          description: The ID of the cart to add the item to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
      responses:
        '201':
          description: Item added to cart successfully
        '500':
          description: Internal server error

  /cart/{cartId}/checkout:
    post:
      summary: Checkout a cart
      tags: 
        - Cart
      parameters:
        - in: path
          name: cartId
          schema:
            type: integer
          required: true
          description: The ID of the cart to checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Checkout'
      responses:
        '200':
          description: Checkout successful
        '404':
          description: Cart not found
        '500':
          description: Internal server error

  /orders:
    get:
      summary: Retrieve all orders for the logged-in user
      tags: 
        - Orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: No orders found
        '500':
          description: Internal server error
  
  /orders/{orderId}:
    get:
      summary: Retrieve a specific order by its ID
      tags: 
        - Orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: integer
          required: true
          description: The ID of the order to retrieve
      responses:
        '200':
          description: A single order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithItems'
        '404':
          description: Order not found
        '500':
          description: Internal server error

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string

    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        category_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductCreate:
      type: object
      required:
        - name
        - price
        - stock
        - category_id
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        category_id:
          type: integer

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        category_id:
          type: integer

    CartCreate:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer

    Cart:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CartItemCreate:
      type: object
      required:
        - product_id
        - quantity
      properties:
        product_id:
          type: integer
        quantity:
          type: integer

    Checkout:
      type: object
      required:
        - user_id
        - payment_method
      properties:
        user_id:
          type: integer
        payment_method:
          type: string

    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        total_price:
          type: number
          format: float
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderWithItems:
      type: object
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            items:
              type: array
              items:
                type: object
                properties:
                  product_id:
                    type: integer
                  quantity:
                    type: integer
                  price:
                    type: number
                    format: float
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
